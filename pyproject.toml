[project]
description = "Multi-Model AI Chat System TUI"
readme = "README.md"
requires-python = ">=3.11"
name = "mchat"
version = "0.1.0"
authors = [{ name = "jspv", email = "jspvgithub@twinleaf.xyz" }]
dependencies = [
    "textual-dominfo>=0.1.0",
    "textual>=0.89.1",
    "pyperclip>=1.9.0",
    "dynaconf>=3.2.6",
    "textual-serve>=1.1.1",
    "chromadb>=0.5.23",
    "rich>=13.9.4",
    "retry>=0.9.2",
    "autogen-core",
    "autogen-ext",
    "autogen-agentchat",
    "apsw>=3.47.2.0",
]

[dependency-groups]
dev = ["poethepoet>=0.31.1", "ruff>=0.8.4", "textual-dev>=1.7.0"]

[tool.uv.sources]
autogen-core = { path = "../autogen/python/packages/autogen-core", editable = true }
autogen-ext = { path = "../autogen/python/packages/autogen-ext", editable = true }
autogen-agentchat = { path = "../autogen/python/packages/autogen-agentchat", editable = true }

[tool.poe.tasks]
mchat = "python -m mchat.mchat"

# Same as Black.
[tool.ruff]
line-length = 88
indent-width = 4
fix = true


[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"


# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
# select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# [tool.ruff.lint]
select = ["E", "F", "W", "B", "Q", "I", "ASYNC", "T20"]
# ignore = ["F401", "E501"]

[tool.ruff.lint.flake8-tidy-imports]
[tool.ruff.lint.flake8-tidy-imports.banned-api]
"unittest".msg = "Use `pytest` instead."
